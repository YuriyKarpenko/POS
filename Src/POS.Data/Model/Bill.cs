//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace POS.Data.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PriceList))]
    [KnownType(typeof(User))]
    [KnownType(typeof(BillItem))]
    public partial class Bill: INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public System.DateTime CreatedTime
        {
            get { return _createdTime; }
            set
            {
                if (_createdTime != value)
                {
                    _createdTime = value;
                    OnPropertyChanged("CreatedTime");
                }
            }
        }
        private System.DateTime _createdTime;
    
        [DataMember]
        public System.Guid CreatedByUserId
        {
            get { return _createdByUserId; }
            set
            {
                if (_createdByUserId != value)
                {
                    _createdByUserId = value;
                    OnPropertyChanged("CreatedByUserId");
                }
            }
        }
        private System.Guid _createdByUserId;
    
        [DataMember]
        public int BillNumber
        {
            get { return _billNumber; }
            set
            {
                if (_billNumber != value)
                {
                    _billNumber = value;
                    OnPropertyChanged("BillNumber");
                }
            }
        }
        private int _billNumber;
    
        [DataMember]
        public System.Guid PriceListId
        {
            get { return _priceListId; }
            set
            {
                if (_priceListId != value)
                {
                    _priceListId = value;
                    OnPropertyChanged("PriceListId");
                }
            }
        }
        private System.Guid _priceListId;
    
        [DataMember]
        public decimal Total
        {
            get { return _total; }
            set
            {
                if (_total != value)
                {
                    _total = value;
                    OnPropertyChanged("Total");
                }
            }
        }
        private decimal _total;
    
        [DataMember]
        public int Guests
        {
            get { return _guests; }
            set
            {
                if (_guests != value)
                {
                    _guests = value;
                    OnPropertyChanged("Guests");
                }
            }
        }
        private int _guests;
    
        [DataMember]
        public bool Printered
        {
            get { return _printered; }
            set
            {
                if (_printered != value)
                {
                    _printered = value;
                    OnPropertyChanged("Printered");
                }
            }
        }
        private bool _printered;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public PriceList PriceList
        {
            get { return _priceList; }
            set
            {
                if (!ReferenceEquals(_priceList, value))
                {
                    _priceList = value;
                    OnNavigationPropertyChanged("PriceList");
                }
            }
        }
        private PriceList _priceList;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    _user = value;
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public ObservableCollection<BillItem> BillItems
        {
            get
            {
                if (_billItems == null)
                {
                    _billItems = new ObservableCollection<BillItem>();
                }
                return _billItems;
            }
            set
            {
                if (!ReferenceEquals(_billItems, value))
                {
                    _billItems = value;
                    OnNavigationPropertyChanged("BillItems");
                }
            }
        }
        private ObservableCollection<BillItem> _billItems;

        #endregion
        #region ChangeTracking

        protected virtual void OnPropertyChanged(String propertyName)
        {
            //if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            //{
            //    ChangeTracker.State = ObjectState.Modified;
            //}
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        //private ObjectChangeTracker _changeTracker;

        //[DataMember]
        //public ObjectChangeTracker ChangeTracker
        //{
        //    get
        //    {
        //        if (_changeTracker == null)
        //        {
        //            _changeTracker = new ObjectChangeTracker();
        //            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
        //        }
        //        return _changeTracker;
        //    }
        //    set
        //    {
        //        if (_changeTracker != null)
        //        {
        //            _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
        //        }
        //        _changeTracker = value;
        //        if (_changeTracker != null)
        //        {
        //            _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
        //        }
        //    }
        //}

        //private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        //{
        //    if (e.NewState == ObjectState.Deleted)
        //    {
        //        ClearNavigationProperties();
        //    }
        //}

        //protected bool IsDeserializing { get; private set; }

        //[OnDeserializing]
        //public void OnDeserializingMethod(StreamingContext context)
        //{
        //    IsDeserializing = true;
        //}

        //[OnDeserialized]
        //public void OnDeserializedMethod(StreamingContext context)
        //{
        //    IsDeserializing = false;
        //    ChangeTracker.ChangeTrackingEnabled = true;
        //}

        //protected virtual void ClearNavigationProperties()
        //{
        //    PriceList = null;
        //    User = null;
        //    BillItems.Clear();
        //}

        #endregion
        #region Association Fixup

        //private void FixupPriceList(PriceList previousValue)
        //{
        //    if (IsDeserializing)
        //    {
        //        return;
        //    }

        //    if (previousValue != null && previousValue.Bills.Contains(this))
        //    {
        //        previousValue.Bills.Remove(this);
        //    }

        //    if (PriceList != null)
        //    {
        //        if (!PriceList.Bills.Contains(this))
        //        {
        //            PriceList.Bills.Add(this);
        //        }

        //        PriceListId = PriceList.Id;
        //    }
        //    if (ChangeTracker.ChangeTrackingEnabled)
        //    {
        //        if (ChangeTracker.OriginalValues.ContainsKey("PriceList")
        //            && (ChangeTracker.OriginalValues["PriceList"] == PriceList))
        //        {
        //            ChangeTracker.OriginalValues.Remove("PriceList");
        //        }
        //        else
        //        {
        //            ChangeTracker.RecordOriginalValue("PriceList", previousValue);
        //        }
        //        if (PriceList != null && !PriceList.ChangeTracker.ChangeTrackingEnabled)
        //        {
        //            PriceList.StartTracking();
        //        }
        //    }
        //}

        //private void FixupUser(User previousValue)
        //{
        //    if (IsDeserializing)
        //    {
        //        return;
        //    }

        //    if (previousValue != null && previousValue.Bills.Contains(this))
        //    {
        //        previousValue.Bills.Remove(this);
        //    }

        //    if (User != null)
        //    {
        //        if (!User.Bills.Contains(this))
        //        {
        //            User.Bills.Add(this);
        //        }

        //        CreatedByUserId = User.Id;
        //    }
        //    if (ChangeTracker.ChangeTrackingEnabled)
        //    {
        //        if (ChangeTracker.OriginalValues.ContainsKey("User")
        //            && (ChangeTracker.OriginalValues["User"] == User))
        //        {
        //            ChangeTracker.OriginalValues.Remove("User");
        //        }
        //        else
        //        {
        //            ChangeTracker.RecordOriginalValue("User", previousValue);
        //        }
        //        if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
        //        {
        //            User.StartTracking();
        //        }
        //    }
        //}

        //private void FixupBillItems(object sender, NotifyCollectionChangedEventArgs e)
        //{
        //    if (IsDeserializing)
        //    {
        //        return;
        //    }

        //    if (e.NewItems != null)
        //    {
        //        foreach (BillItem item in e.NewItems)
        //        {
        //            item.Bill = this;
        //            if (ChangeTracker.ChangeTrackingEnabled)
        //            {
        //                if (!item.ChangeTracker.ChangeTrackingEnabled)
        //                {
        //                    item.StartTracking();
        //                }
        //                ChangeTracker.RecordAdditionToCollectionProperties("BillItems", item);
        //            }
        //        }
        //    }

        //    if (e.OldItems != null)
        //    {
        //        foreach (BillItem item in e.OldItems)
        //        {
        //            if (ReferenceEquals(item.Bill, this))
        //            {
        //                item.Bill = null;
        //            }
        //            if (ChangeTracker.ChangeTrackingEnabled)
        //            {
        //                ChangeTracker.RecordRemovalFromCollectionProperties("BillItems", item);
        //            }
        //        }
        //    }
        //}

        #endregion
    }

    public class ObservableCollection<T> : System.Collections.ObjectModel.ObservableCollection<T>
    { }
}
